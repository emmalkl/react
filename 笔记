react
                用于构建用户页面的js库
1.三个特点
声明式：数据改变react能有效更新并正确的渲染组件
组件化：组件逻辑用js编写而不是模板???可以在应用上传递数据，使得状态与dom分离
一次学习随处编写：可以随时引用react来开发不用重写代码；react还可以使用node来进行服务器渲染；
                使用react native开发原生的移动应用。

2.前言
简单组件：
有状态组件：
应用：
在组件中使用外部插件：

3.认识react
环境:
搭建本地环境步骤----(井字棋的例子中搭建的)
               检查node版本（node -v:v8.11.3）
               creat react app (npx create-react-app my-app  | cd my-app  | npm start)


基础知识:
react在开发过程中最常用的技术:
深刻理解react的优势：

第一课：概览--通过一个井字棋的小游戏对react进行初步认识
1.react是什么?组件？井字棋游戏完善
声明式；非常多的组件构成的ui页面；
（1）react有很多不同类型的组件。从React.Component 的子类开始介绍
ShoppingList是react的一个组件类，它下面扩张了React.Component子类，它只会渲染一些内置dom。
组件接收参数props，通过render返回在页面上展示的层次结构，即render的返回值是dom（react元素/可以当成一个js对象，可保存在变量中，作为参数传递）
，大多数开发的时候使用的是“JSX”，可以轻松书写这些结构。
语法 <div /> 会被编译成 React.createElement('div')。
（2）JSX
在JSX中你可以任意使用js的表达式，只需要用一个大括号把表达式括起来。
（3）react的初始代码在src/index.js
在小游戏--井字棋中，index.js里面有三个渲染的组件，分别是：Square/Board/Game。那么交互呐？
（4）通过props传递数据
从Board父组件传递到Square子组件。
（5）向组件添加交互功能
Square子组件的button加点击事件进行交互。onClick={function(){alert('clink')}}
或者改成onClick={()=>{alert('clink')}}箭头函数的形式。
目的：点击Square组件使得方格里面出现‘X’。---使用state来实现
解决:this.state可以储存方格的状态；向这个 class Square中添加一个构造函数，用来初始化 state。
代码:constructor(props) {
    super(props);
    this.state = {
      value: null,
    };
  }
然后更改Square组件中的render里面的button，onclick事件调用的this.setState，会在每次点击button的时候去通知
react重新渲染Square组件。
组件更新之后，Square 组件的 this.state.value 的值会变为 'X'，因此，我们在游戏棋盘上就能看见 X 了。点击任意一个方格，X 就会出现了。
（6）开发者工具--React Devtools 
2.游戏完善
首先我们需要知道每一个Square组件的button标签都维护一个状态，可以用棋盘Board组件收集每个格子的state值，但是
在重构的时候会很困难。最好的解决办法：直接将所有的 state 状态数据存储在 Board 父组件当中。之后 Board 组件
可以将这些数据通过 props 传递给各个 Square 子组件，正如上文我们把数字传递给每一个 Square 一样。
【注意】同时获取多个子组件数据，或者两个组件之间需要相互通讯的情况时：
把子组件state状态值提升到共同的父组件中储存下来，之后再用props传递给子组件。
（1）state提升至共同的父组件中---重构react【mark】
给父组件添加构造函数，并设置state初始长度为9的空值数组。
【注意】state对于每个组件来说是私有的，以此不能直接通过子组件来更新父组件的state。
对子组件的监听函数进行修改，用子组件更新父组件的state。
（2）从 Board 组件向 Square 组件传递一个函数，当 Square 被点击的时候，这个函数就会被调用
此时Board组件中有两个传递的参数:state和onClick
（3）修改Square的代码
this.state.value改为this.props.value;this.setState()改为this.props.onClick()；
删掉构造函数，因为这个组件已经不需要保存游戏的state状态了。
【注意】在 React 中，有一个命名规范，通常会将代表事件的监听 prop 命名为 on[Event]，
将处理事件的监听方法命名为 handle[Event] 这样的格式。
流程:当子组件的button被点击时，会触发onClick事件，进而触发了传入其中的 this.props.onClick() 方法，
然后触发的 Board 当中的 this.handleClick(i) 方法，
（4）不可变性在react中非常重要----handleClick方法中的.slice()方法创建了一个squares数组
不可变性的重要性和优点：
简化复杂的功能
不可变性使得复杂的特性更容易实现。在后面的章节里，我们会实现一种叫做“时间旅行”的功能。“时间旅行”可以使我们回顾井字棋的历史步骤，并且可以“跳回”之前的步骤。这个功能并不是只有游戏才会用到——撤销和恢复功能在开发中是一个很常见的需求。不直接在数据上修改可以让我们追溯并复用游戏的历史记录。

跟踪数据的改变
如果直接修改数据，那么就很难跟踪到数据的改变。跟踪数据的改变需要可变对象可以与之改变之前的版本进行对比，这样整个对象树都需要被遍历一次。

跟踪不可变数据的变化相对来说就容易多了。如果发现对象变成了一个新对象，那么我们就可以说对象发生改变了。

确定在 React 中何时重新渲染
不可变性最主要的优势在于它可以帮助我们在 React 中创建 pure components。我们可以很轻松的确定不可变数据是否发生了改变，从而确定何时对组件进行重新渲染。
（5）函数组件：对于只包含render方法，不用管理state状态的组件，使用函数组件会更简单。
（6）轮流落子：父组件的handleClick方法反转一下state状态的xIsNext布尔值，控制下一个玩家是谁？
//下一步是哪个玩家
    const status = 'Next player:'+ (this.state.xIsNext?'X':'O');
【注意】后半部分加()
（7）判断胜利方
首先有一个判断胜利的函数calculateWinner，然后需要在父组件调用此函数来判断胜利方。
依旧是修改两个地方，一个是棋盘上方的显示，在父组件的render方法中；另一个是点击方格的函数handleClick方法，
这个方法需要实现由胜利者出现的时候以及某个方格被点击过的时候不做任何操作，直接return。
3.时间回溯---返回上一步的操作
由于react的不可变性，所以返回上一步的操作会显得简单许多，因为根本的底层数据没有发生改变。
（1）保存历史记录---不可变性
在官网上有一个history数组存储了所有squares历史数据数组。
https://react.docschina.org/tutorial/tutorial.html#storing-a-history-of-moves
（2）提升状态---需要确定应该在哪一个组件里保存 history 这个 state
===需要在顶层Game组件展现一个历史步骤的列表，提升共同组件的方法。
功能：访问history数据，因此放在顶层组件中；同时要把 Board 组件中的state状态交给Game组件管理。
===怎么做?
Game组件构造函数中初始化state///
让 Board 组件从 Game 组件中接收 squares 和 onClick 这两个 props：
具体步骤是删除 Board 组件中的 constructor 构造函数->把 Board 组件的 renderSquare 中的 this.state.squares[i] 替换为 this.props.squares[i]
->把 Board 组件的 renderSquare 中的 this.handleClick(i) 替换为 this.props.onClick(i)///
更新 Game 组件的 render 函数，使用最新一次历史记录来确定并展示游戏的状态：
有两个事情要做，status显示；和 Board 组件写进dom中///
移除Board组件中的相应代码///
将handleClick函数放到顶层组件中，并修正其中的代码，因为在Game组件中的state状态改变了。
（3）展示历史步骤记录---历史步骤列表
在顶层组件的render函数中加入一个对history数组的遍历，使用的是map()方法，其中还要渲染一个li列表，此列表
包含一个button标签，它上面绑定一个jumpto事件可以跳转到指定的历史步骤
（4）key
动态创建组件的唯一表示，用来区分不同的列表项和同级兄弟列表项
（5）实现和总结
实现请看index.js中的顶层组件的render方法.
实现了：
tic-tac-toe(三连棋)游戏的所有功能
能够判定玩家何时获胜
能够记录游戏进程
允许玩家查看游戏的历史记录，也可以查看任意一个历史版本的游戏棋盘状态
（6）进阶完善游戏：
在游戏历史记录列表显示每一步棋的坐标，格式为 (列号, 行号)。
在历史记录列表中加粗显示当前选择的项目。
使用两个循环来渲染出棋盘的格子，而不是在代码里写死（hardcode）。
添加一个可以升序或降序显示历史记录的按钮。
每当有人获胜时，高亮显示连成一线的 3 颗棋子。
当无人获胜时，显示一个平局的消息。


第二课：文档---hello world
ReactDOM.render(
  <h1>Hello, world!</h1>,
  document.getElementById('root')
);

第三课：文档---JSX简介
eg. const element = <h1>Hello, world!</h1>;
如上所示，诸如此类的被称为JSX，它们不是字符串也不是html，而是js的扩展语法。
1.为什么使用JSX？
2.{} 通过大括号嵌入js表达式
function formatName(user) {
  return user.firstName + ' ' + user.lastName;
}
const user = {
  firstName: 'Harper',
  lastName: 'Perez'
};
const element = (
  <h1>
    Hello, {formatName(user)}!
  </h1>
);
ReactDOM.render(
  element,
  document.getElementById('root')
);
3.JSX 也是一个表达式
function getGreeting(user) {
  if (user) {
    return <h1>Hello, {formatName(user)}!</h1>;
  }
  return <h1>Hello, Stranger.</h1>;
}
以上代码说明jsx可以作为js对象进行返回，或者变量赋值，或者当参数传递。
4.JSX的特定属性：
const element = <div tabIndex="0"></div>;
const element = <img src={user.avatarUrl}></img>;
使用“”或者{}，并采用小驼峰命名，
JSX 里的 class 变成了 className，而 tabindex 则变为 tabIndex。
5.使用 JSX 指定子元素
const element = <img src={user.avatarUrl} />;
const element = (
  <div>
    <h1>Hello!</h1>
    <h2>Good to see you here.</h2>
  </div>
);
6.JSX 防止注入攻击
const title = response.potentiallyMaliciousInput;
// 直接使用是安全的：
const element = <h1>{title}</h1>;
React DOM 在渲染所有输入内容之前，默认会进行转义。
它可以确保在你的应用中，永远不会注入那些并非自己明确编写的内容。
所有的内容在渲染之前都被转换成了字符串。这样可以有效地防止 XSS（cross-site-scripting, 跨站脚本）攻击。
7.JSX 表示对象
Babel 会把 JSX 转译成一个名为 React.createElement() 函数调用。
const element = (
  <h1 className="greeting">
    Hello, world!
  </h1>
);
等价于
const element = React.createElement(
  'h1',
  {className: 'greeting'},
  'Hello, world!'
);
实际上React.createElement() 函数创建了如下这样的对象
const element = {
  type: 'h1',
  props: {
    className: 'greeting',
    children: 'Hello, world!'
  }
};
React 通过读取这些对象，然后使用它们来构建 DOM 以及保持随时更新。


第四课：文档---元素渲染====ReactDOM.render()
1.“根”dom节点：它内部的内容都是由React DOM 管理的。
是单一的，如果你在将 React 集成进一个已有应用，那么你可以在应用中包含任意多的独立根 DOM 节点。
将一个 React 元素渲染到根 DOM 节点中：
const element = <h1>Hello, world</h1>;
ReactDOM.render(element, document.getElementById('root'));
2.更新已渲染的元素
react元素是不可变对象。如下是一个定时器的例子。
function tick() {
  const element = (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {new Date().toLocaleTimeString()}.</h2>
    </div>
  );
  ReactDOM.render(element, document.getElementById('root'));
}
setInterval(tick, 1000);
更新 react元素 唯一的方式是创建一个全新的元素，并将其传入 ReactDOM.render()。
3.React 只更新它需要更新的部分
React DOM 会将元素和它的子元素与它们之前的状态进行比较，并只会进行必要的更新来使 DOM 达到预期的状态。


第五课：文档---组件 & Props
1.函数组件与class组件
（1）函数组件：js函数
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
（2）class组件
class Welcome extends React.Component {
  render() {
    return <h1>Hello, {this.props.name}</h1>;
  }
}
2.渲染组件
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}
const element = <Welcome name="Sara" />;
ReactDOM.render(
  element,
  document.getElementById('root')
);
我们调用 ReactDOM.render() 函数，并传入 <Welcome name="Sara" /> 作为参数。
React 调用 Welcome 组件，并将 {name: 'Sara'} 作为 props 传入。
Welcome 组件将 <h1>Hello, Sara</h1> 元素作为返回值。
React DOM 将 DOM 高效地更新为 <h1>Hello, Sara</h1>。
注意： 组件名称必须以大写字母开头。
3.组合组件
每一个新的react应用程序的顶层组件都是app组件。组件可以在它的输出中引用其它组件。
例子创建一个可以多次渲染 Welcome 组件的 App 组件：
function Welcome(props) {
  return <h1>Hello, {props.name}</h1>;
}

function App() {
  return (
    <div>
      <Welcome name="Sara" />
      <Welcome name="Cahal" />
      <Welcome name="Edite" />
    </div>
  );
}

ReactDOM.render(
  <App />,
  document.getElementById('root')
);
4.提取组件
将组件拆分为更小的组件。
提高组件的复用
//去官网看例子
5.Props 的只读性
所有 React 组件都必须像纯函数一样保护它们的 props 不被更改。例如如下函数
function sum(a, b) {
  return a + b;
}
【注意】不可以对入参进行更改。
在不违反上述规则的情况下，state 允许 React 组件随用户操作、网络响应或者其他变化而动态更改输出内容。


第六课：文档---state&生命周期
1.封装时间组件，每秒更新一次
function Clock(props) {
  return (
    <div>
      <h1>Hello, world!</h1>
      <h2>It is {props.date.toLocaleTimeString()}.</h2>
    </div>
  );
}

function tick() {
  ReactDOM.render(
    <Clock date={new Date()} />,
    document.getElementById('root')
  );
}

setInterval(tick, 1000);
以上更新时钟组件的方式存在一些弊端，因为它每隔一秒都在重新渲染一遍，所以我们应当让组件自我更新。
这时候使用的方法是---------state+生命周期函数
改进:




2.将函数组件转换成 class 组件
创建一个同名的 ES6 class，并且继承于 React.Component。
添加一个空的 render() 方法。
将函数体移动到 render() 方法之中。
在 render() 方法中使用 this.props 替换 props。
删除剩余的空函数声明。
例如：
class Clock extends Component {
    render() {
        return (
            <div>
                <h1>这是一个每秒自动更新一次的计时器</h1>
                <h2>{props.date.toLocaleTimeString()}</h2>
            </div>
        );
    }
}
3.向 class 组件中添加局部的 state
(1)在构造函数中给组件赋state初值，为当前的date
Class 组件应该始终使用 props 参数来调用父类的构造函数。
(2){this.state.date.toLocaleTimeString()}
(3)移除 <Clock /> 元素中的 date 属性：<Clock />,
(4)控制生命周期函数，使其每秒更新一次ui
在这一步需要给组件加上componentDidMount和componentWillUnmount钩子函数
正确的步骤：
当 <Clock /> 被传给 ReactDOM.render()的时候，React 会调用 Clock 组件的构造函数。因为 Clock 需要显示当前的时间，所以它会用一个包含当前时间的对象来初始化 this.state。我们会在之后更新 state。
之后 React 会调用组件的 render() 方法。这就是 React 确定该在页面上展示什么的方式。然后 React 更新 DOM 来匹配 Clock 渲染的输出。
当 Clock 的输出被插入到 DOM 中后，React 就会调用 ComponentDidMount() 生命周期方法。在这个方法中，Clock 组件向浏览器请求设置一个计时器来每秒调用一次组件的 tick() 方法。
浏览器每秒都会调用一次 tick() 方法。 在这方法之中，Clock 组件会通过调用 setState() 来计划进行一次 UI 更新。得益于 setState() 的调用，React 能够知道 state 已经改变了，然后会重新调用 render() 方法来确定页面上该显示什么。这一次，render() 方法中的 this.state.date 就不一样了，如此以来就会渲染输出更新过的时间。React 也会相应的更新 DOM。
一旦 Clock 组件从 DOM 中被移除，React 就会调用 componentWillUnmount() 生命周期方法，这样计时器就停止了。
4.正确使用state
（1）不要直接修改 State
正确修改应该是this.setState({comment: 'Hello'});
注意只能在构造函数中给state赋值。
（2）State 的更新可能是异步的
正确的应该是
this.setState((state, props) => ({
  counter: state.counter + props.increment
}));
不能依赖this.props 和 this.state的值来更新下一个状态，可能会异步更新。
（3）State 的更新会被合并
constructor(props) {
    super(props);
    this.state = {
      posts: [],
      comments: []
    };
  }
componentDidMount() {
    fetchPosts().then(response => {
      this.setState({
        posts: response.posts
      });
    });

    fetchComments().then(response => {
      this.setState({
        comments: response.comments
      });
    });
}
【注意】this.setState({comments}) 完整保留了 this.state.posts， 但是完全替换了 this.state.comments。
称为浅合并
5.数据是向下流动的
单向数据流，每个组件真正的独立，如在index.js中同时创建的三个clock组件是相互独立的，state状态值只能严格
向“下”流动。


第七课：文档---事件处理
不同点:
传统的绑定事件:
<button onclick="activateLasers()">
  Activate Lasers
</button>
react元素绑定事件：
<button onClick={activateLasers}>
  Activate Lasers
</button>
<<<<<<< HEAD

=======
>>>>>>> d70901352f2496446b59e7504736e293dd549cfd
阻止默认行为的不同点（阻止链接打开）：
传统的:通过return false就可以了
<a href="#" onclick="console.log('The link was clicked.'); return false">
  Click me
</a>
react：
function ActionLink() {
  function handleClick(e) {
    e.preventDefault();
    console.log('The link was clicked.');
  }
  return (
    <a href="#" onClick={handleClick}>
      Click me
    </a>
  );
}
（1）Toggle 组件会渲染一个让用户切换开关状态的按钮：
class Toggle extends React.Component {
  constructor(props) {
    super(props);
    this.state = {isToggleOn: true};

    // 为了在回调中使用 `this`，这个绑定是必不可少的
    this.handleClick = this.handleClick.bind(this);
  }

  handleClick() {
    this.setState(state => ({
      isToggleOn: !state.isToggleOn
    }));
  }

  render() {
    return (
      <button onClick={this.handleClick}>
        {this.state.isToggleOn ? 'ON' : 'OFF'}
      </button>
    );
  }
}

ReactDOM.render(
  <Toggle />,
  document.getElementById('root')
);

【注意】这个组件使用的JSX回调函数中的this，需要通过构造函数中的bind进行this绑定。
还有两种方法：
1）class fields 正确的绑定回调函数
 handleClick = () => {
    console.log('this is:', this);
  }
2）在回调中使用箭头函数：
<button onClick={() => this.handleClick()}>
        Click me
</button>
但是这种方法存在一些问题，会重复渲染。所以还是使用上面两种方法
（2）向事件处理程序传递参数
例如，若 id 是你要删除那一行的 ID，以下两种方式都可以向事件处理函数传递参数：
<button onClick={(e) => this.deleteRow(id, e)}>Delete Row</button>
<button onClick={this.deleteRow.bind(this, id)}>Delete Row</button>
上述两种方式是等价的，分别通过箭头函数和 Function.prototype.bind 来实现。

在这两种情况下，React 的事件对象 e 会被作为第二个参数传递。如果通过箭头函数的方式，事件对象必须显式的进行传递，而通过 bind 的方式，事件对象以及更多的参数将会被隐式的进行传递。


第八课：文档---条件渲染
依据应用的不同状态，只渲染对应状态下的部分内容。
官网上举例，判断用户是否登录来决定显示哪一组组件。
1.元素变量
使用变量来储存元素
2.&&--与运算符
function Mailbox(props) {
  const unreadMessages = props.unreadMessages;
  return (
    <div>
      <h1>Hello!</h1>
      {unreadMessages.length > 0 &&
        <h2>
          You have {unreadMessages.length} unread messages.
        </h2>
      }
    </div>
  );
}

const messages = ['React', 'Re: React', 'Re:Re: React'];
ReactDOM.render(
  <Mailbox unreadMessages={messages} />,
  document.getElementById('root')
);
3.三目运算符
<b>{isLoggedIn ? 'currently' : 'not'}</b> 
{isLoggedIn
  ? <LogoutButton onClick={this.handleLogoutClick} />
  : <LoginButton onClick={this.handleLoginClick} />
}
4.阻止组件渲染
方法：render方法里使用null


第九课：文档---列表&key






